{"version":3,"sources":["hooks/useLocalStorage.ts","tools/api.ts","components/DashboardLoader.tsx","components/LoadingModal.tsx","components/ErrorModal.tsx","components/SavedSuccessfully.tsx","components/SearchableDropdown.tsx","components/AddPet.tsx","components/ViewPets.tsx","components/GetAllPets.tsx","components/AddItem.tsx","components/GetAllOfTypeOfItem.tsx","components/GetAllItems.tsx","components/Dashboard.tsx","components/IncorrectLogin.tsx","components/Login.tsx","components/App.tsx","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","API_URL","tokenify","username","password","a","fetch","headers","Authorization","btoa","json","getGameData","getPlayerData","token","gameData","Items","parseData","playerData","playerObj","Player","init","updatePlayerData","method","Accept","body","getUpdatedData","doAllRequests","DashboardLoader","children","setToken","setGameData","setPlayerData","useAsync","loading","error","result","console","log","style","position","top","left","transform","color","className","role","message","LoadingModal","Modal","Header","Title","Body","ErrorModal","errorMessage","closeButton","href","target","rel","SavedSuccessfully","SearchableDropdown","React","forwardRef","ref","labeledBy","aria-labelledby","FormControl","autoFocus","placeholder","onChange","e","Children","toArray","filter","child","props","join","toLowerCase","includes","displayName","AddPet","player","petID","setPetID","levelRef","useRef","nicknameRef","finished","setFinished","epic","setEpic","getPet","petId","pet","find","ID","displayPet","src","type","metadata","vIcon","alt","data","name","Form","onSubmit","event","preventDefault","level","parseInt","current","kennel","addPet","CombatFormulas","getHPFromParams","statHealth","Creature","starsToLevel","Dropdown","Toggle","Menu","as","map","Item","onClick","Group","Label","Control","min","max","defaultValue","required","Button","ViewPets","petIndex","setPetIndex","nameRef","resultRef","getSpell","spellId","spell","index","nickname","innerHTML","nativeSpells","disabled","foreignSpells","GetAllPets","closeModal","forEach","AddItem","id","itemId","setItemId","item","done","setDone","amountRef","ids","names","displayItem","backpack","add","undefined","i","indexOf","GetAllOfTypeOfItem","setType","GetAllItems","amount","Dashboard","modalOpen","setModalOpen","addPetModalOpen","setAddPetModalOpen","viewPetsModalOpen","setViewPetsModalOpen","getAllPetsModalOpen","setGetAllPetsModalOpen","addItemModalOpen","setAddItemModalOpen","getAllOfTypeOfItemModalOpen","setGetAllOfTypeOfItemModalOpen","getAllItemsModalOpen","setGetAllItemsModalOpen","setLoading","setError","saved","setSaved","saveButtonClicked","setSaveButtonClicked","goldRef","memberStarsRef","bountyPointsRef","winsRef","lossesRef","darkTowerRef","gradeRef","stars","xpRequiredForLevel","gold","storedMemberStars","bountyScore","win","loss","tower","grade","status","Error","Container","Card","Text","getLevel","getGold","getWins","getLosses","show","onHide","removeItem","window","location","reload","IncorrectLogin","Login","setUsername","setPassword","usernameRef","passwordRef","handleSubmit","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d23033ff.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nexport default function useLocalStorage (key: string, initialValue: any) {\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(key)\r\n        if (jsonValue != null) return JSON.parse(jsonValue)\r\n        if (typeof initialValue === \"function\") {\r\n            return initialValue()\r\n        } else {\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { Player } from \"prodigy-player-api-to-prodigys-format\"\r\nimport { Items } from \"prodigy-player-api-to-prodigys-format/dist/Items\"\r\n\r\nexport const API_URL = \"https://prodigy-api.hostedposted.com\"\r\n\r\nexport const tokenify = async (username: string, password: string) =>\r\n    await (await fetch(`${API_URL}/token`, {\r\n        headers: {\r\n            Authorization: `Basic ${btoa(`${username}:${password}`)}`\r\n        }\r\n    })).json()\r\n\r\nexport const getGameData = async () =>\r\n    await (await fetch(`${API_URL}/gameData`)).json()\r\n\r\nexport const getPlayerData = async (token: { token: string }, gameData: {}) => {\r\n    Items.parseData(gameData)\r\n    const playerData = await (await fetch(`${API_URL}/player`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token.token}`\r\n        }\r\n    })).json()\r\n    const playerObj = new Player()\r\n    playerObj.init({ ...token, ...playerData })\r\n    return playerObj\r\n}\r\n\r\nexport const updatePlayerData = async (token: string, playerData: Player) =>\r\n    await fetch(`${API_URL}/player/`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"*/*\",\r\n            \"Accept-Language\": \"en-US,en;q=0.9\"\r\n        },\r\n        body: JSON.stringify(playerData.getUpdatedData(true))\r\n    })\r\n\r\nexport const doAllRequests = async (username: string, password: string) => {\r\n    const token = await tokenify(username, password)\r\n    const gameData = await getGameData()\r\n    const playerData = await getPlayerData(token, gameData)\r\n    return { token, gameData, playerData }\r\n}\r\n","import React from \"react\"\r\nimport { useAsync } from \"react-async-hook\"\r\nimport { doAllRequests } from \"../tools/api\"\r\n\r\nexport default function DashboardLoader ({ username, password, children, setToken, setGameData, setPlayerData }: { username: string, password: string, children: any, setToken: React.Dispatch<React.SetStateAction<{ token: string } | null>>, setGameData: React.Dispatch<React.SetStateAction<any>>, setPlayerData: React.Dispatch<React.SetStateAction<any>> }) {\r\n    const { loading, error, result } = useAsync(doAllRequests, [username, password])\r\n\r\n    if (result) {\r\n        setToken(result.token)\r\n        setGameData(result.gameData)\r\n        setPlayerData(result.playerData)\r\n    }\r\n    if (error) console.log(error)\r\n\r\n    return (\r\n        <div>\r\n            {loading && (\r\n                <div style={{ position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translateY(-50%)\" }}>\r\n                    <div style={{ color: \"black\" }} className=\"spinner-border\" role=\"status\">\r\n                        <span style={{ color: \"black\" }} className=\"visually-hidden\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {error && <h1 className=\"d-flex justify-content-center\">Error: {error.message}</h1>}\r\n            {result && children}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Modal } from \"react-bootstrap\"\r\n\r\nexport default function LoadingModal () {\r\n    return (\r\n        <>\r\n            <Modal.Header>\r\n                <Modal.Title>Loading...</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <div className=\"spinner-border\" role=\"status\">\r\n                        <span className=\"visually-hidden\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Modal } from \"react-bootstrap\"\r\n\r\nexport default function ErrorModal ({ errorMessage }: { errorMessage: string }) {\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>A error occurred</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Please try again. If the error persists please ask for help in our <a href=\"https://discord.gg/XQDfbfq\" target=\"_blank\" rel=\"noreferrer\">discord server.</a> <br/> The error is <code>{errorMessage}</code>.</p>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Modal } from \"react-bootstrap\"\r\n\r\nexport default function SavedSuccessfully () {\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Saved Successfully!</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Your changes have been saved successfully!</p>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { FormControl } from \"react-bootstrap\"\r\n\r\nconst SearchableDropdown = React.forwardRef(\r\n    // @ts-ignore\r\n    // eslint-disable-next-line react/prop-types\r\n    ({ children, style, className, \"aria-labelledby\": labeledBy }, ref) => {\r\n        const [value, setValue] = useState(\"\")\r\n\r\n        return (\r\n            <div\r\n                // @ts-ignore\r\n                ref={ref}\r\n                style={style}\r\n                className={className}\r\n                aria-labelledby={labeledBy}\r\n            >\r\n                <FormControl\r\n                    autoFocus\r\n                    className=\"mx-3 my-2 w-auto\"\r\n                    placeholder=\"Type to filter...\"\r\n                    onChange={(e) => setValue(e.target.value)}\r\n                    value={value}\r\n                />\r\n                <ul className=\"list-unstyled\">\r\n                    {React.Children.toArray(children).filter(\r\n                        (child) =>\r\n                            // @ts-ignore\r\n                            !value || child.props.children.props.children[1].props.children.join(\"\").toLowerCase().includes(value)\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n)\r\nSearchableDropdown.displayName = \"SearchableDropdown\"\r\n\r\nexport default SearchableDropdown\r\n","import type { GameData } from \"prodigy-api/lib/GameData\"\r\nimport type { Player } from \"prodigy-player-api-to-prodigys-format\"\r\nimport { CombatFormulas } from \"prodigy-player-api-to-prodigys-format/dist/CombatFormulas\"\r\nimport { Creature } from \"prodigy-player-api-to-prodigys-format/dist/Creature\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\"\r\nimport SearchableDropdown from \"./SearchableDropdown\"\r\n\r\nexport default function AddPet ({ gameData, player }: { gameData: GameData, player: Player }) {\r\n    const [petID, setPetID] = useState<number>(1)\r\n    const levelRef = React.useRef<HTMLInputElement>(null)\r\n    const nicknameRef = React.useRef<HTMLInputElement>(null)\r\n    const [finished, setFinished] = useState(false)\r\n    const [epic, setEpic] = useState(false)\r\n\r\n    function getPet (petId: number) {\r\n        return gameData.pet.find(pet => pet.ID === petId)\r\n    }\r\n\r\n    function displayPet (pet: any) {\r\n        if (!pet) return <></>\r\n\r\n        return (\r\n            <>\r\n                <img src={`https://cdn.prodigygame.com/game/assets/v1_cache/single-images/icon-${pet.type}-${pet.ID}/${pet.metadata.vIcon}/icon-${pet.type}-${pet.ID}.png`} alt={pet.data.name} />\r\n                <span className=\"ms-3\">[{pet.ID}] {pet.data.name}</span>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent) => {\r\n        event.preventDefault()\r\n\r\n        if ([125, 126, 127, 128, 129, 130, 131, 132, 133].includes(petID)) {\r\n            setEpic(true)\r\n        }\r\n\r\n        const pet = getPet(petID)\r\n        if (!pet) return\r\n        const level = parseInt(levelRef.current?.value ?? \"1\")\r\n        // @ts-ignore\r\n        player.kennel?.addPet(petID, CombatFormulas.getHPFromParams(level, pet.data?.statHealth ?? 0), Creature.starsToLevel(level), level, nicknameRef.current?.value || null)\r\n        setFinished(true)\r\n    }\r\n\r\n    return (\r\n        finished\r\n            ? (\r\n                <>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Pet added!</Modal.Title>\r\n                    </Modal.Header>\r\n                    {epic\r\n                        ? <Modal.Body>\r\n                            <p>\r\n                                <b>Warning: </b> Epics are discontinued/deprecated. Saving might not work.\r\n                            </p>\r\n                        </Modal.Body>\r\n                        : \"\"}\r\n                </>\r\n            )\r\n            : (\r\n                <>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Pet</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Dropdown>\r\n                                <Dropdown.Toggle style={{ color: \"white\" }}>\r\n                                    Select Pet\r\n                                </Dropdown.Toggle>\r\n\r\n                                <Dropdown.Menu as={SearchableDropdown}>\r\n                                    {gameData.pet.filter(e => ![152, 153, 154].includes(e.ID)).map(pet => (\r\n                                        <Dropdown.Item onClick={() => setPetID(pet.ID)} key={pet.ID} value={pet.ID}>\r\n                                            {displayPet(pet)}\r\n                                        </Dropdown.Item>\r\n                                    ))}\r\n                                </Dropdown.Menu>\r\n                                <span className=\"ms-3\">{displayPet(getPet(petID))}</span>\r\n                            </Dropdown>\r\n                            <Form.Group>\r\n                                <Form.Label>Pet Level</Form.Label>\r\n                                <Form.Control ref={levelRef} type=\"number\" min=\"1\" max=\"100\" defaultValue=\"100\" required />\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label>Nickname</Form.Label>\r\n                                <Form.Control ref={nicknameRef} placeholder=\"Give your pet a nickname...\" />\r\n                            </Form.Group>\r\n                            <Button type=\"submit\" className=\"mt-3\" style={{ color: \"white\" }}>Add Pet</Button>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </>\r\n            )\r\n    )\r\n}\r\n","import { GameData } from \"prodigy-api/lib/GameData\"\r\nimport type { Player } from \"prodigy-player-api-to-prodigys-format\"\r\nimport React, { useRef, useState } from \"react\"\r\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\"\r\nimport SearchableDropdown from \"./SearchableDropdown\"\r\n\r\nexport default function ViewPets ({ gameData, player }: { gameData: GameData, player: Player }) {\r\n    const [petIndex, setPetIndex] = useState<number>(-1)\r\n    const levelRef = useRef<HTMLInputElement>(null)\r\n    const nameRef = useRef<HTMLInputElement>(null)\r\n    const resultRef = useRef<HTMLSpanElement>(null)\r\n\r\n    function getPet (petId: number) {\r\n        return gameData.pet.find(pet => pet.ID === petId)\r\n    }\r\n\r\n    function getSpell (spellId: number) {\r\n        return gameData.spell.find(spell => spell.ID === spellId)\r\n    }\r\n\r\n    function displayPet (pet: any) {\r\n        if (!pet) return <></>\r\n\r\n        return (\r\n            <>\r\n                <img src={`https://cdn.prodigygame.com/game/assets/v1_cache/single-images/icon-${pet.type}-${pet.ID}/${pet.metadata.vIcon}/icon-${pet.type}-${pet.ID}.png`} alt={pet.data.name} />\r\n                <span className=\"ms-3\">[{pet.ID}] {pet.data.name}</span>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function handleSubmit (event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault()\r\n\r\n        if (petIndex === -1 || !player.kennel) return\r\n        player.kennel.data[petIndex].level = parseInt(levelRef.current?.value || \"0\")\r\n        player.kennel.data[petIndex].nickname = nameRef.current?.value || null\r\n        resultRef.current && (resultRef.current.innerHTML = \"Edited successfully!\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Pets</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle style={{ color: \"white\" }}>\r\n                        Select Pet\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu as={SearchableDropdown}>\r\n                        {player.kennel?.data.map((pet, index) => (\r\n                            <Dropdown.Item onClick={() => setPetIndex(index)} key={index} value={index}>\r\n                                {displayPet(getPet(pet.ID))}\r\n                            </Dropdown.Item>\r\n                        ))}\r\n                    </Dropdown.Menu>\r\n                    <span className=\"ms-3\">{petIndex === -1 ? \"\" : displayPet(getPet(player.kennel!.data[petIndex].ID))}</span>\r\n                </Dropdown>\r\n                {petIndex !== -1 && (\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group>\r\n                            <Form.Label>Pet Level</Form.Label>\r\n                            <Form.Control ref={levelRef} type=\"number\" defaultValue={player.kennel!.data[petIndex].level} max=\"100\" min=\"1\" />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Pet Nickname</Form.Label>\r\n                            <Form.Control ref={nameRef} placeholder=\"Give your pet a nickname...\" defaultValue={player.kennel!.data[petIndex].nickname || \"\"} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Spells</Form.Label>\r\n                            <Form.Control value={getSpell(getPet(player.kennel!.data[petIndex].ID)!.data.nativeSpells[0].spell)?.data.name} disabled />\r\n                            <Form.Control className=\"mt-3\" value={getSpell(getPet(player.kennel!.data[petIndex].ID)!.data.nativeSpells[1].spell)?.data.name} disabled />\r\n                            <Form.Control className=\"mt-3\" value={getSpell(player.kennel!.data[petIndex].foreignSpells![0])!.data.name} disabled />\r\n                            <Form.Control className=\"mt-3\" value={getSpell(player.kennel!.data[petIndex].foreignSpells![1])!.data.name} disabled />\r\n                        </Form.Group>\r\n                        <Button type=\"submit\" className=\"mt-3\" style={{ color: \"white\" }}>Edit</Button>\r\n                        <br/>\r\n                        <span ref={resultRef}></span>\r\n                    </Form>\r\n                )}\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import type { GameData } from \"prodigy-api/lib/GameData\"\r\nimport type { Player } from \"prodigy-player-api-to-prodigys-format\"\r\nimport React, { useRef } from \"react\"\r\nimport { Button, Form, Modal } from \"react-bootstrap\"\r\nimport { CombatFormulas } from \"prodigy-player-api-to-prodigys-format/dist/CombatFormulas\"\r\nimport { Creature } from \"prodigy-player-api-to-prodigys-format/dist/Creature\"\r\n\r\nexport default function GetAllPets ({ player, gameData, closeModal }: { player: Player, gameData: GameData, closeModal: () => void }) {\r\n    const levelRef = useRef<HTMLInputElement>(null)\r\n\r\n    function handleSubmit (event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault()\r\n\r\n        const level = parseInt(levelRef.current!.value)\r\n\r\n        gameData.pet.filter(e => ![125, 126, 127, 128, 129, 130, 131, 132, 133].includes(e.ID)).forEach(pet => {\r\n            // @ts-ignore\r\n            player.kennel?.addPet(pet.ID, CombatFormulas.getHPFromParams(level, pet.data?.statHealth ?? 0), Creature.starsToLevel(level), level, null)\r\n        })\r\n        closeModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Get All Pets</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>Level</Form.Label>\r\n                        <Form.Control ref={levelRef} type=\"number\" min=\"1\" max=\"100\" defaultValue=\"100\" />\r\n                    </Form.Group>\r\n                    <Button type=\"submit\" className=\"mt-3\" style={{ color: \"white\" }}>Get All Pets</Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import type { GameData } from \"prodigy-api/lib/GameData\"\r\nimport type { Player } from \"prodigy-player-api-to-prodigys-format\"\r\nimport React, { useRef, useState } from \"react\"\r\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\"\r\nimport SearchableDropdown from \"./SearchableDropdown\"\r\n\r\nexport default function AddItem ({ gameData, player }: { gameData: GameData, player: Player }) {\r\n    const [itemId, setItemId] = useState<\"boots\" | \"follow\" | \"fossil\" | \"hat\" | \"item\" | \"key\" | \"mathTownFrame\" | \"mathTownInterior\" | \"mount\" | \"outfit\" | \"spellRelic\" | \"weapon\" | \"currency\">(\"boots\")\r\n    const [item, setItem] = useState<number>(-1)\r\n    const [done, setDone] = useState<boolean>(false)\r\n    const amountRef = useRef<HTMLInputElement>(null)\r\n\r\n    const ids = [\"boots\", \"follow\", \"fossil\", \"hat\", \"item\", \"key\", \"mathTownFrame\", \"mathTownInterior\", \"mount\", \"outfit\", \"spellRelic\", \"weapon\", \"currency\"] as const\r\n    const names = [\"Boots\", \"Buddies\", \"Fossils\", \"Hats\", \"Items\", \"Key Items\", \"Tower Town Frames\", \"Tower Town Interiors\", \"Mounts\", \"Outfits\", \"Relics\", \"Weapons\", \"Currencies\"]\r\n\r\n    function getItem (id: number) {\r\n        // @ts-ignore\r\n        return gameData[itemId].find(i => i.ID === id)\r\n    }\r\n\r\n    function displayItem (item: any) {\r\n        if (!item) return <></>\r\n\r\n        return (\r\n            <>\r\n                <img src={`https://cdn.prodigygame.com/game/assets/v1_cache/single-images/icon-${item.type}-${item.ID}/${item.metadata.vIcon}/icon-${item.type}-${item.ID}.png`} alt={item.data.name} />\r\n                <span className=\"ms-3\">[{item.ID}] {item.data.name}</span>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function handleSubmit (event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault()\r\n\r\n        if (item === -1) return\r\n        player.backpack?.add(itemId, item, undefined, parseInt(amountRef.current?.value ?? \"\") ?? undefined)\r\n        setDone(true)\r\n    }\r\n\r\n    return done\r\n        ? (\r\n            <>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Item Added!</Modal.Title>\r\n                </Modal.Header>\r\n            </>\r\n        )\r\n        : (\r\n            <>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add Item</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle style={{ color: \"white\" }}>\r\n                            Select type of item\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu as={SearchableDropdown}>\r\n                                {names.map((name, i) => (\r\n                                    <Dropdown.Item key={i} onClick={() => setItemId(ids[i])}>\r\n                                        {name}\r\n                                    </Dropdown.Item>\r\n                                ))}\r\n                            </Dropdown.Menu>\r\n                            <span className=\"ms-3\">{names[ids.indexOf(itemId)]}</span>\r\n                        </Dropdown>\r\n                        <Dropdown className=\"mt-3\">\r\n                            <Dropdown.Toggle style={{ color: \"white\" }}>\r\n                            Select {names[ids.indexOf(itemId)]}\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu as={SearchableDropdown}>\r\n                                {gameData[itemId].map(item => (\r\n                                    <Dropdown.Item onClick={() => setItem(item.ID)} key={item.ID} value={item.ID}>\r\n                                        {displayItem(item)}\r\n                                    </Dropdown.Item>\r\n                                ))}\r\n                            </Dropdown.Menu>\r\n                            <span className=\"ms-3\">{displayItem(getItem(item))}</span>\r\n                        </Dropdown>\r\n                        <Form.Group className=\"mt-3\">\r\n                            <Form.Label>Amount</Form.Label>\r\n                            <Form.Control type=\"number\" ref={amountRef} min=\"1\" defaultValue=\"1\" required />\r\n                        </Form.Group>\r\n                        <Button className=\"mt-3\" type=\"submit\" style={{ color: \"white\" }}>Add Item</Button>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </>\r\n        )\r\n}\r\n","import type { GameData } from \"prodigy-api/lib/GameData\"\r\nimport type { Player } from \"prodigy-player-api-to-prodigys-format\"\r\nimport React, { useRef, useState } from \"react\"\r\nimport { Button, Dropdown, Form, Modal } from \"react-bootstrap\"\r\nimport SearchableDropdown from \"./SearchableDropdown\"\r\n\r\nexport default function GetAllOfTypeOfItem ({ gameData, player }: { gameData: GameData, player: Player }) {\r\n    const [type, setType] = useState<\"boots\" | \"follow\" | \"fossil\" | \"hat\" | \"item\" | \"key\" | \"mathTownFrame\" | \"mathTownInterior\" | \"mount\" | \"outfit\" | \"spellRelic\" | \"weapon\" | \"currency\">(\"boots\")\r\n    const [done, setDone] = useState(false)\r\n    const amountRef = useRef<HTMLInputElement>(null)\r\n\r\n    const ids = [\"boots\", \"follow\", \"fossil\", \"hat\", \"item\", \"key\", \"mathTownFrame\", \"mathTownInterior\", \"mount\", \"outfit\", \"spellRelic\", \"weapon\", \"currency\"] as const\r\n    const names = [\"Boots\", \"Buddies\", \"Fossils\", \"Hats\", \"Items\", \"Key Items\", \"Tower Town Frames\", \"Tower Town Interiors\", \"Mounts\", \"Outfits\", \"Relics\", \"Weapons\", \"Currencies\"]\r\n\r\n    function handleSubmit (e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        gameData[type].forEach(item => {\r\n            player.backpack?.add(type, item.ID, undefined, parseInt(amountRef.current?.value ?? \"\") ?? undefined)\r\n        })\r\n        setDone(true)\r\n    }\r\n\r\n    return (\r\n        done\r\n            ? (\r\n                <>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Added!</Modal.Title>\r\n                    </Modal.Header>\r\n                </>\r\n            )\r\n            : <>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Get all {type}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle style={{ color: \"white\" }}>\r\n                            Select type of item\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu as={SearchableDropdown}>\r\n                                {names.map((name, i) => (\r\n                                    <Dropdown.Item key={i} onClick={() => setType(ids[i])}>\r\n                                        {name}\r\n                                    </Dropdown.Item>\r\n                                ))}\r\n                            </Dropdown.Menu>\r\n                            <span className=\"ms-3\">{names[ids.indexOf(type)]}</span>\r\n                        </Dropdown>\r\n                        <Form.Group className=\"mt-3\">\r\n                            <Form.Label>Amount</Form.Label>\r\n                            <Form.Control type=\"number\" ref={amountRef} min=\"1\" defaultValue=\"1\" required />\r\n                        </Form.Group>\r\n                        <Button className=\"mt-3\" type=\"submit\" style={{ color: \"white\" }}>Get all {type}</Button>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </>\r\n    )\r\n}\r\n","import type { GameData } from \"prodigy-api/lib/GameData\"\r\nimport type { Player } from \"prodigy-player-api-to-prodigys-format\"\r\nimport React, { useRef, useState } from \"react\"\r\nimport { Button, Form, Modal } from \"react-bootstrap\"\r\n\r\nexport default function GetAllItems ({ gameData, player }: { gameData: GameData, player: Player }) {\r\n    const [done, setDone] = useState(false)\r\n    const amountRef = useRef<HTMLInputElement>(null)\r\n\r\n    const ids = [\"boots\", \"follow\", \"fossil\", \"hat\", \"item\", \"key\", \"mathTownFrame\", \"mathTownInterior\", \"mount\", \"outfit\", \"spellRelic\", \"weapon\", \"currency\"] as const\r\n\r\n    function handleSubmit (event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault()\r\n\r\n        const amount = parseInt(amountRef.current!.value)\r\n        ids.forEach(id => {\r\n            gameData[id].forEach(item => {\r\n                player.backpack?.add(id, item.ID, undefined, amount ?? undefined)\r\n            })\r\n        })\r\n        setDone(true)\r\n    }\r\n\r\n    return (\r\n        done\r\n            ? (\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>All items added to your backpack!</Modal.Title>\r\n                </Modal.Header>\r\n            )\r\n            : <>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Get All Pets</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group>\r\n                            <Form.Label>Amount</Form.Label>\r\n                            <Form.Control ref={amountRef} type=\"number\" min=\"1\" max=\"99\" defaultValue=\"1\" />\r\n                        </Form.Group>\r\n                        <Button type=\"submit\" className=\"mt-3\" style={{ color: \"white\" }}>Get All Items</Button>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </>\r\n    )\r\n}\r\n","import { GameData } from \"prodigy-api/lib/GameData\"\r\nimport { Player } from \"prodigy-player-api-to-prodigys-format\"\r\nimport { CombatFormulas } from \"prodigy-player-api-to-prodigys-format/dist/CombatFormulas\"\r\nimport React, { useRef, useState } from \"react\"\r\nimport { Button, Card, Container, Form, Modal } from \"react-bootstrap\"\r\nimport DashboardLoader from \"./DashboardLoader\"\r\nimport { updatePlayerData } from \"../tools/api\"\r\nimport LoadingModal from \"./LoadingModal\"\r\nimport ErrorModal from \"./ErrorModal\"\r\nimport SavedSuccessfully from \"./SavedSuccessfully\"\r\nimport AddPet from \"./AddPet\"\r\nimport ViewPets from \"./ViewPets\"\r\nimport GetAllPets from \"./GetAllPets\"\r\nimport AddItem from \"./AddItem\"\r\nimport GetAllOfTypeOfItem from \"./GetAllOfTypeOfItem\"\r\nimport GetAllItems from \"./GetAllItems\"\r\n\r\nexport default function Dashboard ({ username, password }: { username: string, password: string }) {\r\n    const [token, setToken] = useState<{ token: string } | null>(null)\r\n    const [gameData, setGameData] = useState<GameData | null>(null)\r\n    const [playerData, setPlayerData] = useState<Player | null>(null)\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const [addPetModalOpen, setAddPetModalOpen] = useState(false)\r\n    const [viewPetsModalOpen, setViewPetsModalOpen] = useState(false)\r\n    const [getAllPetsModalOpen, setGetAllPetsModalOpen] = useState(false)\r\n    const [addItemModalOpen, setAddItemModalOpen] = useState(false)\r\n    const [getAllOfTypeOfItemModalOpen, setGetAllOfTypeOfItemModalOpen] = useState(false)\r\n    const [getAllItemsModalOpen, setGetAllItemsModalOpen] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState<string | null>(null)\r\n    const [saved, setSaved] = useState(false)\r\n    const [saveButtonClicked, setSaveButtonClicked] = useState(false)\r\n    const levelRef = useRef<HTMLInputElement>(null)\r\n    const goldRef = useRef<HTMLInputElement>(null)\r\n    const memberStarsRef = useRef<HTMLInputElement>(null)\r\n    const bountyPointsRef = useRef<HTMLInputElement>(null)\r\n    const winsRef = useRef<HTMLInputElement>(null)\r\n    const lossesRef = useRef<HTMLInputElement>(null)\r\n    const darkTowerRef = useRef<HTMLInputElement>(null)\r\n    const gradeRef = useRef<HTMLInputElement>(null)\r\n\r\n    async function handleSubmit (event: React.FormEvent) {\r\n        event.preventDefault()\r\n\r\n        if (!saveButtonClicked || !token || !playerData) return\r\n\r\n        setSaveButtonClicked(false)\r\n\r\n        setLoading(true)\r\n        setModalOpen(true)\r\n\r\n        // Level\r\n        playerData.data.level = parseInt(levelRef.current!.value)\r\n        playerData.data.stars = CombatFormulas.xpRequiredForLevel(playerData.data.level)\r\n        // Gold\r\n        playerData.data.gold = parseInt(goldRef.current!.value)\r\n        // Member Stars\r\n        playerData.data.storedMemberStars = parseInt(memberStarsRef.current!.value)\r\n        // Bounty Points\r\n        playerData.data.bountyScore = parseInt(bountyPointsRef.current!.value)\r\n        // Wins\r\n        playerData.data.win = parseInt(winsRef.current!.value)\r\n        // Losses\r\n        playerData.data.loss = parseInt(lossesRef.current!.value)\r\n        // Dark Tower\r\n        playerData.data.tower = parseInt(darkTowerRef.current!.value)\r\n        // Grade\r\n        playerData.data.grade = parseInt(gradeRef.current!.value)\r\n\r\n        try {\r\n            const response = await updatePlayerData(token.token, playerData)\r\n            if (response.status === 418) {\r\n                throw new Error(\"SavingError. Was a Epic added?\")\r\n            }\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError((e as Error).message)\r\n        }\r\n        setLoading(false)\r\n        setSaved(true)\r\n    }\r\n\r\n    return (\r\n        <DashboardLoader username={username} password={password} setToken={setToken} setGameData={setGameData} setPlayerData={setPlayerData}>\r\n            {gameData && playerData && (\r\n                <Container className=\"text-align-center\">\r\n                    <h1>Prodigy Account Hacker</h1>\r\n                    <h2>User: {username}</h2>\r\n                    <br />\r\n                    <br />\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>Player Data</Card.Title>\r\n                                <Card.Text>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Level</Form.Label>\r\n                                        <Form.Control ref={levelRef} type=\"number\" defaultValue={playerData.getLevel()} max=\"100\" min=\"1\" required />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Gold</Form.Label>\r\n                                        <Form.Control ref={goldRef} type=\"number\" defaultValue={playerData.getGold()} min=\"0\" required />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Member Stars</Form.Label>\r\n                                        <Form.Control ref={memberStarsRef} type=\"number\" defaultValue={playerData.data.storedMemberStars} min=\"0\" required />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Bounty Points</Form.Label>\r\n                                        <Form.Control ref={bountyPointsRef} type=\"number\" defaultValue={playerData.data.bountyScore} max=\"100\" min=\"0\" required />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Wins</Form.Label>\r\n                                        <Form.Control ref={winsRef} type=\"number\" defaultValue={playerData.getWins()} min=\"0\" required />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Losses</Form.Label>\r\n                                        <Form.Control ref={lossesRef} type=\"number\" defaultValue={playerData.getLosses()} min=\"0\" required />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Dark Tower Floor</Form.Label>\r\n                                        <Form.Control ref={darkTowerRef} type=\"number\" defaultValue={playerData.data.tower} max=\"100\" min=\"1\" required />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Grade</Form.Label>\r\n                                        <Form.Control ref={gradeRef} type=\"number\" defaultValue={playerData.data.grade} max=\"8\" min=\"1\" required />\r\n                                    </Form.Group>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>Pets</Card.Title>\r\n                                <Card.Text>\r\n                                    <Button className=\"me-3\" onClick={() => { setAddPetModalOpen(true) }}>Add Pet</Button>\r\n                                    <Modal show={addPetModalOpen} onHide={() => setAddPetModalOpen(false)}>\r\n                                        <AddPet gameData={gameData} player={playerData} />\r\n                                    </Modal>\r\n                                    <Button className=\"me-3\" onClick={() => { setViewPetsModalOpen(true) }}>View and Edit Pets</Button>\r\n                                    <Modal show={viewPetsModalOpen} onHide={() => setViewPetsModalOpen(false)}>\r\n                                        <ViewPets gameData={gameData} player={playerData} />\r\n                                    </Modal>\r\n                                    <Button className=\"me-3\" onClick={() => { setGetAllPetsModalOpen(true) }}>Get All Pets</Button>\r\n                                    <Modal show={getAllPetsModalOpen} onHide={() => setGetAllPetsModalOpen(false)}>\r\n                                        <GetAllPets gameData={gameData} player={playerData} closeModal={() => setGetAllPetsModalOpen(false)} />\r\n                                    </Modal>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>Items</Card.Title>\r\n                                <Card.Text>\r\n                                    <Button className=\"me-3\" onClick={() => { setAddItemModalOpen(true) }}>Add Item</Button>\r\n                                    <Modal show={addItemModalOpen} onHide={() => setAddItemModalOpen(false)}>\r\n                                        <AddItem gameData={gameData} player={playerData} />\r\n                                    </Modal>\r\n                                    <Button className=\"me-3\" onClick={() => { setGetAllOfTypeOfItemModalOpen(true) }}>Get All Of...</Button>\r\n                                    <Modal show={getAllOfTypeOfItemModalOpen} onHide={() => setGetAllOfTypeOfItemModalOpen(false)}>\r\n                                        <GetAllOfTypeOfItem gameData={gameData} player={playerData}/>\r\n                                    </Modal>\r\n                                    <Button className=\"me-3\" onClick={() => { setGetAllItemsModalOpen(true) }}>Get All Items</Button>\r\n                                    <Modal show={getAllItemsModalOpen} onHide={() => setGetAllItemsModalOpen(false)}>\r\n                                        <GetAllItems gameData={gameData} player={playerData}/>\r\n                                    </Modal>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <Button type=\"submit\" className=\"mt-3 me-3\" onClick={() => setSaveButtonClicked(true)}>Save</Button>\r\n                        <Button className=\"mt-3\" onClick={() => {\r\n                            localStorage.removeItem(\"username\")\r\n                            localStorage.removeItem(\"password\")\r\n                            window.location.reload()\r\n                        }}>Logout</Button>\r\n                    </Form>\r\n                    <Modal show={modalOpen} onHide={() => setModalOpen(false)}>\r\n                        {loading || error === null ? (saved ? <SavedSuccessfully /> : <LoadingModal />) : <ErrorModal errorMessage={error}/>}\r\n                    </Modal>\r\n                </Container>\r\n            )}\r\n        </DashboardLoader>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Modal } from \"react-bootstrap\"\r\n\r\nexport default function IncorrectLogin () {\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title style={{ color: \"black\" }}>Incorrect Login</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p style={{ color: \"black\" }}>\r\n                    Check your username and password and try again. If you still have issues try logging in on prodigy. Their might be a captcha you have to click. If errors persist after that, please contact us at our <a href=\"https://discord.gg/XQDfbfq\" target=\"_blank\" rel=\"noreferrer\">discord</a>.\r\n                </p>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import React, { useRef, FormEvent, useState } from \"react\"\r\nimport { Button, Container, Form, Modal } from \"react-bootstrap\"\r\nimport { tokenify } from \"../tools/api\"\r\nimport IncorrectLogin from \"./IncorrectLogin\"\r\nimport LoadingModal from \"./LoadingModal\"\r\n\r\nexport default function Login ({ setUsername, setPassword }: { setUsername: (username: string) => void, setPassword: (password: string) => void }) {\r\n    const usernameRef = useRef(null)\r\n    const passwordRef = useRef(null)\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handleSubmit = async (event: FormEvent) => {\r\n        event.preventDefault()\r\n\r\n        if (!usernameRef.current || !passwordRef.current) return\r\n\r\n        const username = (usernameRef.current as HTMLInputElement).value\r\n        const password = (passwordRef.current as HTMLInputElement).value\r\n\r\n        setLoading(true)\r\n        setModalOpen(true)\r\n        const result = await tokenify(username, password)\r\n        setLoading(false)\r\n        setModalOpen(false)\r\n        if (!result.token) {\r\n            return setModalOpen(true)\r\n        }\r\n\r\n        setUsername(username)\r\n        setPassword(password)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"d-flex justify-content-center\">Login</h1>\r\n            <Container className=\"align-items-center d-flex\">\r\n                <Form onSubmit={handleSubmit} className=\"w-100\">\r\n                    <Form.Group>\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type=\"text\" ref={usernameRef} placeholder=\"Enter your prodigy username\" required />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" ref={passwordRef} placeholder=\"Enter your prodigy password\" required />\r\n                    </Form.Group>\r\n                    <Button type=\"submit\" className=\"mt-3\">Login</Button>\r\n                </Form>\r\n            </Container>\r\n            <Modal show={modalOpen} onHide={() => setModalOpen(false)}>\r\n                {loading ? <LoadingModal /> : <IncorrectLogin />}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport useLocalStorage from \"../hooks/useLocalStorage\"\r\nimport Dashboard from \"./Dashboard\"\r\nimport Login from \"./Login\"\r\n\r\nexport default function App () {\r\n    const [username, setUsername] = useLocalStorage(\"username\", \"\")\r\n    const [password, setPassword] = useLocalStorage(\"password\", \"\")\r\n\r\n    return username && password ? <Dashboard username={username} password={password}/> : <Login setUsername={setUsername} setPassword={setPassword}/>\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./components/App\"\r\nimport \"./index.scss\"\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}